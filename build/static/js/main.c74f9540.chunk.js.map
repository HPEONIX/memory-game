{"version":3,"sources":["components/SingleCard.jsx","App.js","index.js"],"names":["SingleCard","card","handleChoice","flipped","disabled","className","src","alt","onClick","cardImages","matched","App","useState","nextChoice","setNextChoice","choiceNo","setChoiceNo","cards","setCards","turns","setTurns","choices","setChoices","setDisabled","shuffleCards","console","log","alert","shuffledCards","i","sort","Math","random","map","idx","id","includes","length","newChoices","useEffect","choiceSource","choice","every","selectedCardSrc","prevCards","setTimeout","resetTurn","prevTurns","type","name","onChange","e","Number","target","value","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c74f9540.chunk.js","sourcesContent":["import React from 'react'\r\nimport \"./SingleCard.css\"\r\n\r\nfunction SingleCard({card, handleChoice, flipped, disabled}) {\r\n\r\n    const handleClick = () =>{\r\n        if(!disabled) handleChoice(card)\r\n    }\r\n\r\n    return (\r\n        <div className=\"card\">\r\n            <div className ={flipped ? \"flipped\":\"\"}>\r\n                <img className=\"front\" src={card.src} alt={card.src} />\r\n                <img className=\"back\" onClick={()=>handleClick()} src=\"/img/cover.png\" alt=\"./img/cover.png\" />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SingleCard\r\n","import { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport SingleCard from \"./components/SingleCard\";\n\nconst cardImages = [\n  { src: \"./img/helmet-1.png\", matched: false },\n  { src: \"./img/potion-1.png\", matched: false },\n  { src: \"./img/ring-1.png\", matched: false },\n  { src: \"./img/scroll-1.png\", matched: false },\n  { src: \"./img/shield-1.png\", matched: false },\n  { src: \"./img/sword-1.png\", matched: false },\n];\n\nfunction App() {\n  const [nextChoice, setNextChoice] = useState(2)\n  const [choiceNo, setChoiceNo] = useState(2);\n  const [cards, setCards] = useState([]);\n  const [turns, setTurns] = useState(0);\n  const [choices, setChoices] = useState([]);\n  const [disabled, setDisabled] = useState(false)\n\n  //shuffle cards\n  const shuffleCards = () => {\n    if(nextChoice<2) \n    {\n      console.log(\"NO\")\n      alert(\"value  shouldbe greater than 1\");\n      return\n    }\n    setChoiceNo(nextChoice)\n    console.log(`no of choises needed ${choiceNo} of type ${typeof(choiceNo)}`)\n    let shuffledCards = []\n    for (let i = 0; i < nextChoice; i++) {\n      shuffledCards = [...shuffledCards, ...cardImages]\n    }\n    shuffledCards = shuffledCards.sort(() => Math.random() - 0.5)\n      .map((card, idx) => ({ ...card, id: idx }));\n    setCards(shuffledCards);\n    setChoices([]);\n    setTurns(0);\n  };\n\n  //handle choice :- add selected card to choises if not already chosen\n  const handleChoice = (card) => {\n    console.log(`no of choises needed ${choiceNo} of type ${typeof(choiceNo)}`)\n    if (choices.includes(card)) {\n      console.log(\"card already selected\")\n      return\n    }\n    if (choices.length === choiceNo) {\n      console.log(\"max selection reached\")\n      return\n    }\n    console.log(\"card added\")\n    const newChoices = [...choices, card];\n    setChoices(newChoices);\n  };\n\n  //Compare selected cards\n  useEffect(() => {\n    console.log(\"card compared\");\n    if (choices.length === choiceNo) {                                                     //if max no of cards chosen per turn reached\n      setDisabled(true);\n      const choiceSource = choices.map((choice) => choice.src);\n      if (choiceSource.every((selectedCardSrc) => selectedCardSrc === choiceSource[0])) {           //check if similar cards are chosen\n        console.log(\"matching cards\");\n        setCards((prevCards) => {\n          return prevCards.map((card) =>\n            choiceSource.includes(card.src) ? { ...card, matched: true } : card                         //set matched flags of matched-selected card to true\n          );\n        });\n      } else {\n        console.log(\"cards dont match\");\n      }\n      setTimeout(() => resetTurn(), 1000);                                                                                  //reset turn if max no of cards chosen per turn reached\n    }\n  }, [choices, choiceNo]);\n\n  //reset turn :- clear choises and increment turn count\n  const resetTurn = () => {\n    console.log(\"choice reset\");\n    setTurns((prevTurns) => prevTurns + 1);\n    setChoices([]);\n    setDisabled(false);\n  };\n\n  //start game automatically\n  useEffect(() => {\n    shuffleCards();\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <h1>Memory Game</h1>\n      <p>\n        <input type=\"number\" className=\"next-choices\" name=\"next-choices\" id=\"next-choices\" onChange={(e) => { setNextChoice(Number(e.target.value)) }} />\n      </p>\n      <button onClick={() => shuffleCards()}>New Game</button>\n\n      <div className=\"card-grid\">\n        {cards.map((card) => (\n          <SingleCard key={card.id} card={card} handleChoice={handleChoice} flipped={choices.includes(card) || card.matched} disabled={disabled} />\n        ))}\n      </div>\n      <p>Turns: {turns}</p>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}